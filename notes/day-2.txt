asynchronity in JS/TS:
---------------------------------
JS is single threaded, you can't create multiple threads from JS.
JS can take advantage of the environment where the JS code is running.

ex: Node JS, though is a JS-based server side framework, but uses extra threads (6). Out of them 4 threads are deciated to reading data from or writing data to a file etc. JS can request to get a functikn executed in an extra thread without blocking the main thread.

ES6 feature: Promise API
give promise api a taks to get executed without blocking the main thread.

RxJS:
------------------
observable object
observer object => watch an observable. collection of callbacks and those callbacks are executed when the observable object receives data or error and if any other task to do after observable receives data
of => operator (function)

Subject			=> 
BehaviorSubject		=>
ReplaySubject		=>

XMLHttpRequest object:
---------------------------------
	     init send  received processing complete
readyState => 0  -> 1   -> 2      -> 3       -> 4
readystatechange => event, which gets fired every time readystate value changes



Angular [version 19]:
------------------------------------------------------
client-side JS-based framework for UI development
Single-Page Application (SPA)
create a large application based on series of Components
write common business/data access logic in Services
provides dependency injection of services
provides mechanism (binding) to pass data from code to UI or vice versa of a component
provides routing feature

Tool => Angular CLI (Command Line Interface)

Standalone => non-modular application


component naming convention:
---------------------------------

name: sample

folder: sample
		sample.component.ts	=>	SampleComponent
		sample.component.html
		sample.component.css
		sample.component.spec.ts

selector: <app-*>

angular "things":
-----------------------
thing			type		class		    decorator
component		class	export class XComponent	    @Component()
pipe			class	export class XPipe	    @Pipe()
directive		class	export class XDirective     @Directive()
service			class	export class XService	    @Injectable()
module			class	export class XModule        @NgModule()

binding:
-------------------------------------------------------
passing data between component's code and template

1. Data Binding
direction: from code to template/view/design of the same component

syntax: 
	a. interpolation: does convert the property value to string
	code: property-name=value
	template: <tag-name attr-name ="{{property-name}}">

	b. property binding: does not convert the property value to string
	code: property-name=value
	template: <tag-name [attr-name]="property-name">

2. Event Binding
direction: from template/view/design to the code of the same component

	code: method(){}
	template: <tag-name (event-name)="method(...)">

template reference variable:
<tag-name #var-name>

<input type='text' id='txtName' #inputName>
===>
var inputName = document.querySelector('#txtName')
inputName.value


property-name			controls
----------------------------------------------
name				p,input type="text"




















