passing data between components

1. passing data between shallowly nested components
	a. passing data from nested to its parent component: event-bidning
	
	In nested component => 
	i. create a property which is of type EventEmitter
	ii. decide which type of value to emit
	iii. decorate the property with @utput() decorator (@angualr/core package)
	iv. emit the value bu calling "this.eventPropName.emit(value)"


	In parent component design=>
	bind the event to a method in component's code
	<app-x (event-propname)="method($event)">

	In parent component's code=>
	method(value:any){
		//code to do something with the received value
	}

	b. passing data from parent to nested component: data-binding

	In nested component:
	declare a property with @Input() decorator
	@Input() prop-name:type=<init-val>

	In parent component design: [do data binding of that @Input() property]
	<app-x [prop-name]="data-from-parent">




filter-product component template => filter-product component code => parent compoent design => parent compoent code => nested (product-list) component code => nested (product-list) component design


get all products
GET => http://localhost:3003/products		{ "message":"", "data":[{},{},...]}

get a product
GET http://127.0.0.1:3003/products/1		{ "message":"", "data":{} }

incorrect id:
GET http://127.0.0.1:3003/products/100		{ "message":"", "data":null }

add a new product
POST http://127.0.0.1:3003/products		{ "message":"", "data":[{},{},...] }
request body: a JSON object (product)

existing product id
POST http://127.0.0.1:3003/products		{ "message":"", "data":null }

update an existing product
PUT http://127.0.0.1:3003/products/6		{ "message":"", "data":[{},{},...] }
request body: a JSON object (product)

update an existing product with incorrect id:
PUT http://127.0.0.1:3003/products/100		{ "message":"", "data":null }

delete an existing product:
DELETE http://127.0.0.1:3003/products/6		{ "message":"", "data":[{},{},...] }	

delete an existing product with incorrect id:
DELETE http://127.0.0.1:3003/products/100	{ "message":"", "data":null }	


response model:
{ "message":string, "data": {} | [{},..] | null }


Service in Angular:
----------------------------
1. service creation => create a class with methods
2. service provider registration:

where????
	a. dedicated instance for a single asset: 
		register with asset level "providers:[]"

	b. dedicated instance for multiple assets of a feature module
		register with feature module level "providers:[]"

	c. dedicated instance for multiple assets from entire application
		register with root module level "providers:[]"

How???
	//class provider
	providers:[ProductService]

	//equivalent to
	providers:[
		{
      			provide: ProductService,
      			useClass: ProductService
    		}
	]

	other ways:
	providers:[
	{
      	provide: ProductService,
      	useValue: new ProductService()
    	}
    	{
      	provide: ProductService,
      	useExisting: ProductService,
    	}
    	{
      	provide: ProductService,
      	useFactory: () => { return new ProductService() }
    	}]


	custom tokenized service provider:
	 {
      	provide: 'SERVICE_TOKEN',
      	useClass: ProductService
    	}

3. service consumption:

constructor(private ps: ProductService) => create an instance of service class  or its child type, which is tokenized by the same name as that of the service class and supply the reference of that service class object

constructor(@Inject('SERVICE_TOKEN') ps: ProductService) => create an instance of service class  or its child type, which is tokenized by the token 'SERVICE_TOKEN'

@Inject(<token-name>) => decorator for method/constructor parameter, NOT for property of the class

constructor(@Inject(SERVICE_TOKEN) private ps: ServiceContract) => create an instance of service class  that implements ServiceContract interface and toekenized by the  token SERVICE_TOKEN


HTTP requests:
-------------------------
built-in service class: HttpClient
methods: get(), post(), put(), delete(),....
return type: Observable<any>


providers:[HttpClient] => HttpClientModule (depricated)

provideHttpclient() => brings the service provider of HttpClient

import the module for HttpClient for its provider
ask for DI of HttpClient in your service class constructor

@Component()/@Directive()/@Pipe/@NgModule()

ProductContainerComponent	=> ProductService

@Injectable()
ProductService			=> HttpClient

@Injectable() => must be used with an entity, which requires DI in Angular
@Component()/@Directive()/@Pipe/@NgModule() etc. when used with a class, automtaically applies that decorator
in case of Service, since that is a regular class, you must manually mark the same with @Injectable(), in case that service class has dependency/dependencies

Best Practice: always use @Injectable() with service


Lifecycle of Component instance:
-------------------------------------------
1. creation phase:
	a. all properties are initialized with default values (if provided)
	b. constructor gets invoked (some fields might get initialized)
	c. if it is a nested component and has @Input() properties, will now receive data from the parent component. this time an event gets fired: changes
	d. after "changes" event, "init" event gets fired

2. update phase:
	if it is a nested component and has @Input() properties, will now receive updated data from the parent component, if in the parnet component the actual data state is updated. this time also from component 'changes' event gets fired.

3. destruction phase:
	when component (design) gets somehow (conditionally) unmounted from HTML/DOM, then the component gets destroyed. this time an event gets fired "destroy"


event-name		interface	method
----------------------------------------------------
X			OnX		ngOnX

changes			
	















